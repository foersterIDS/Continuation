%% path continuation - aux.initialize_structs
%
%   Institute of Dynamics and Vibration Research
%   Leibniz University Hannover
%   16.09.2021 - Alwin FÃ¶rster
%
function [Bifurcation,Counter,Do,Info,Initial,Path,Plot,Solver] = initialize_structs(var0,l_start,l_end,ds0,Opt,output_flag)
    %% Bifurcation
    %
    Bifurcation = struct('bif',[],...
                         'dirs',{cell(1,2)},...
                         'flag',0);
    %
    %% Counter
    %
    Counter = struct('catch',0,...
                     'catch_old',0,...
                     'closed_counter',0,...
                     'error',0,...
                     'loop',0,...
                     'remove',0,...
                     'step',0,...
                     'valid_stepback',0);
    %
    %% Do
    %
    Do = struct('change_corrector',false,...
                'continuation',false,...
                'convergeToTarget',false,...
                'deflate',false,...
                'homotopy',false,...
                'loop',false,...
                'remove',false,...
                'stepback',false,...
                'stop_manually',false,...
                'suspend',false);
	%
    %% Info
    %
    Info = struct('ds0',ds0,...
                  'exitflag',-1,...
                  'exit_msg','',...
                  'nv',numel(var0),...
                  'l_start',l_start,...
                  'l_end',l_end,...
                  'var0',var0);
	%
    %% Initial
    %
    Initial = struct('ds_max',Opt.ds_max);
    %
    %% Path
    %
    Path = struct('l_all',[],...
                  's_all',[],...
                  'speed_of_continuation',[],...
                  'var_all',[],...
                  'x_predictor',[]);
	%
    %% Plot
    %
    if (aux.ison(Opt.plot) && ~Opt.plot.detail) || ~aux.ison(Opt.plot)
        Plot = struct('fig',[],...
                      'pl',[],...
                      'pl_curr',[]);
    else
        Plot = struct('fig',[],...
                      'pl',[],...
                      'pl_cor',[],...
                      'pl_cor_assist',[],...
                      'pl_curr',[],...
                      'pl_det',[],...
                      'pl_it',[],...
                      'pl_pre',[],...
                      'pl_s',[]);
    end
	%
    %% Solver
    %
    [solver,predictor_solver,num_jac_solver,default_solver_output] = continuation.solver(Opt,output_flag);
    Solver = struct('default_output',default_solver_output,...
                    'main',solver,...
                    'num_jac',num_jac_solver,...
                    'predictor',predictor_solver);
    %
end